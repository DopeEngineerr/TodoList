{"version":3,"sources":["reportWebVitals.js","TodoList2.jsx","TodoList.jsx","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","TodoList2","props","className","onClick","onSelect","id","text","TodoList","useState","InputList","setInputList","Items","setItems","CheckMark","oldItems","filter","arrElem","index","type","autoComplete","onChange","event","target","value","for","map","itemval","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gJAYeA,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,4BCWCQ,EAfG,SAACC,GACjB,OACE,sBAAKC,UAAU,YAAf,UACE,wBACEA,UAAU,sEACVC,QAAS,WACPF,EAAMG,SAASH,EAAMI,KAHzB,SAKE,mBAAGH,UAAU,iBAAb,qBAEF,oBAAIA,UAAU,QAAQG,GAAG,QAAzB,SAAkC,6BAAMJ,EAAMK,aC0ErCC,EAlFE,WAAO,IAAD,EAEaC,qBAFb,mBAEdC,EAFc,KAEHC,EAFG,OAGKF,mBAAS,IAHd,mBAGdG,EAHc,KAGPC,EAHO,KAmBfC,EAAY,SAACR,GACjBO,GAAS,SAACE,GACR,OAAOA,EAASC,QAAO,SAACC,EAASC,GAC/B,OAAOA,IAAUZ,SAOvB,OACE,qBAAKH,UAAU,MAAf,SACE,qBAAKA,UAAU,wBAAf,SACE,qBAAKA,UAAU,iBAAf,SACE,sBAAKA,UAAU,eAAf,UACE,qBAAKA,UAAU,+CAAf,SAA8D,4CAE9D,qBAAKA,UAAU,YAAf,SACE,sBAAKA,UAAU,MAAf,UAEE,sBAAKA,UAAU,0BAAf,UACE,uBACEgB,KAAK,OACLb,GAAG,QACHc,aAAa,MACbC,SAtCA,SAACC,GACjBX,EAAaW,EAAMC,OAAOC,QAsCVA,MAAOd,IAET,uBAAOe,IAAI,QAAX,yBAGF,qBAAKtB,UAAU,YAAf,SACE,wBAAQA,UAAU,6DAA6DgB,KAAK,SAASf,QAzCzF,WAClBS,GAAS,SAACE,GACR,MAAM,GAAN,mBACMA,GADN,CACgBL,OAGlBC,EAAa,KAmCC,SACE,mBAAGR,UAAU,kBAAb,0BAOR,qBAAKA,UAAU,UAAUG,GAAG,UAA5B,SACE,6BAEGM,EAAMc,KAAI,SAACC,EAAST,GACnB,OACE,cAAC,EAAD,CAEEZ,GAAIY,EACJX,KAAMoB,EACNtB,SAAUS,GAHLI,oBCjE3BU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BxC,K","file":"static/js/main.963ba101.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./TodoList.css\";\r\n\r\n\r\nconst TodoList2 = (props) => {\r\n  return (\r\n    <div className=\"myEntries\" >\r\n      <button\r\n        className=\"btn-floating btn-small pink lighten-1 waves-effect waves-light left\"\r\n        onClick={() => {\r\n          props.onSelect(props.id);\r\n        }}>\r\n        <i className=\"material-icons\">clear</i>\r\n      </button>\r\n      <h5 className=\"entry\" id=\"entry\" ><li >{props.text}</li></h5>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList2;","import \"./TodoList.css\";\r\nimport { useState } from \"react\";\r\nimport TodoList2 from \"./TodoList2\";\r\n\r\n\r\nconst TodoList = () => {\r\n\r\n  const [InputList, setInputList] = useState();\r\n  const [Items, setItems] = useState([]);\r\n\r\n\r\n  const ItemEvent = (event) => {\r\n    setInputList(event.target.value);\r\n  };\r\n\r\n  const ListOfItems = () => {\r\n    setItems((oldItems) => {\r\n      return (\r\n        [...oldItems, InputList]\r\n      );\r\n    });\r\n    setInputList(\"\");\r\n  };\r\n\r\n  const CheckMark = (id) => {\r\n    setItems((oldItems) => {\r\n      return oldItems.filter((arrElem, index) => {\r\n        return index !== id;\r\n      });\r\n    });\r\n  };\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s12 l4 offset-l4 \">\r\n        <div className=\"box z-depth-3 \">\r\n          <div className=\"box-content \">\r\n            <div className=\"title pink lighten-1 white-text center-align\"><h1>TodoList</h1></div>\r\n\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n\r\n                <div className=\"col s11 l11 input-field\">\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"tasks\"\r\n                    autoComplete=\"off\"\r\n                    onChange={ItemEvent}\r\n                    value={InputList}\r\n                  />\r\n                  <label for=\"tasks\">Add Task</label>\r\n                </div>\r\n\r\n                <div className=\"col s1 l1\">\r\n                  <button className=\"btn-floating pink lighten-1 right waves-effect waves-light\" type=\"submit\" onClick={ListOfItems} >\r\n                    <i className=\"material-icons \">add</i>\r\n                  </button>\r\n\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"entries\" id=\"entries\">\r\n              <ol>\r\n\r\n                {Items.map((itemval, index) => {\r\n                  return (\r\n                    <TodoList2\r\n                      key={index}\r\n                      id={index}\r\n                      text={itemval}\r\n                      onSelect={CheckMark}\r\n                    />\r\n                  );\r\n                })}\r\n\r\n              </ol>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TodoList;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport TodoList from './TodoList';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}